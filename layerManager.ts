import Konva from 'konva';
import { stage, mainLayer } from './konvaManager';
// Plus tard: import de fonctions pour s√©lectionner/transformer les objets Konva

// R√©f√©rences DOM pour le panneau des calques
const objectListUL = document.getElementById('object-list') as HTMLUListElement;
const btnMoveUp = document.getElementById('btn-move-up') as HTMLButtonElement;
const btnMoveDown = document.getElementById('btn-move-down') as HTMLButtonElement;
const btnDeleteObject = document.getElementById('btn-delete-object') as HTMLButtonElement;

let selectedKonvaNode: Konva.Node | null = null; // L'objet Konva actuellement s√©lectionn√©
let selectedListItem: HTMLLIElement | null = null; // L'√©l√©ment <li> correspondant

export function initializeLayerManager() {
    if (!objectListUL || !btnMoveUp || !btnMoveDown || !btnDeleteObject) {
        console.error("√âl√©ments du panneau des calques non trouv√©s.");
        return;
    }

    // √âcouteurs pour les boutons de contr√¥le des calques (seront impl√©ment√©s plus tard)
    btnMoveUp.addEventListener('click', moveSelectedObjectUp);
    btnMoveDown.addEventListener('click', moveSelectedObjectDown);
    btnDeleteObject.addEventListener('click', deleteSelectedObject);

    // Observer les changements dans mainLayer pour mettre √† jour la liste
    // Konva n'a pas d'observeur direct, donc nous mettrons √† jour la liste
    // apr√®s chaque action qui modifie mainLayer (ajout, suppression, changement d'ordre).
    // Pour l'instant, on peuple la liste une fois √† l'init et on fournit une fonction pour la rafra√Æchir.

    // √âcouteur d'√©v√©nement sur la liste pour g√©rer la s√©lection d'items
    objectListUL.addEventListener('click', (event) => {
        const target = event.target as HTMLElement;
        const listItem = target.closest('li'); // Trouver l'√©l√©ment <li> parent cliqu√©
        if (listItem && listItem.dataset.konvaId) {
            selectObjectFromList(listItem);
        }
    });

    updateObjectList(); // Afficher la liste initiale
    updateLayerControlButtons(); // Mettre √† jour l'√©tat des boutons
}

// Fonction pour rafra√Æchir la liste des objets
export function updateObjectList() {
    if (!mainLayer || !objectListUL) return;

    objectListUL.innerHTML = ''; // Vider la liste actuelle

    const children = mainLayer.getChildren().slice().reverse(); // Afficher de haut en bas (dernier ajout√© en haut de la liste)

    if (children.length === 0) {
        const li = document.createElement('li');
        li.textContent = "Aucun objet sur le canevas.";
        li.style.fontStyle = "italic";
        li.style.textAlign = "center";
        li.style.cursor = "default";
        objectListUL.appendChild(li);
        return;
    }

    children.forEach(node => {
        const li = document.createElement('li');
        li.dataset.konvaId = node.id(); // Utiliser l'ID unique de Konva pour lier l'item au n≈ìud

        let objectName = node.name() || node.getClassName(); // Utiliser le nom ou le type de classe
        let icon = '‚ùì';

        if (node instanceof Konva.Line) {
            icon = (node.globalCompositeOperation() === 'destination-out') ? 'üßº' : '‚úèÔ∏è'; // Gomme ou Crayon
            if (node.name() === 'pencilStroke') objectName = "Trait Crayon";
            else if (node.name() === 'eraserStroke') objectName = "Gommage";
            else objectName = "Ligne";
        } else if (node instanceof Konva.Text) {
            icon = 'üìÑ'; // Ou 'T' ou üî°
            objectName = `Texte: "${(node.text().substring(0, 15) + (node.text().length > 15 ? '...' : ''))}"`;
        }
        // Ajouter d'autres types ici (Rect, Circle, Image...)

        const span = document.createElement('span');
        span.textContent = `${icon} ${objectName}`;
        li.appendChild(span);

        // Si cet objet √©tait celui s√©lectionn√©, le marquer comme tel
        if (selectedKonvaNode && node.id() === selectedKonvaNode.id()) {
            li.classList.add('selected');
            selectedListItem = li; // Mettre √† jour la r√©f√©rence au li
        }

        objectListUL.appendChild(li);
    });
}

function selectObjectFromList(listItem: HTMLLIElement) {
    if (!mainLayer) return;
    const konvaId = listItem.dataset.konvaId;
    if (!konvaId) return;

    const nodeToSelect = mainLayer.findOne(`#${konvaId}`); // S√©lectionner par ID

    if (nodeToSelect) {
        // D√©s√©lectionner l'ancien item
        if (selectedListItem) {
            selectedListItem.classList.remove('selected');
        }
        // S√©lectionner le nouvel item
        listItem.classList.add('selected');
        selectedListItem = listItem;
        selectedKonvaNode = nodeToSelect;

        console.log("Objet s√©lectionn√© depuis la liste:", selectedKonvaNode.name() || selectedKonvaNode.getClassName());
        // Ici, on pourrait ajouter un Transformer Konva pour visualiser la s√©lection sur le canvas
        // addTransformerToNode(selectedKonvaNode);
    } else {
        // Si le n≈ìud n'est pas trouv√© (ne devrait pas arriver si la liste est synchro)
        selectedKonvaNode = null;
        if (selectedListItem) selectedListItem.classList.remove('selected');
        selectedListItem = null;
    }
    updateLayerControlButtons();
}

// TODO: Impl√©menter la s√©lection depuis le canvas qui met √† jour la liste

function moveSelectedObjectUp() {
    if (selectedKonvaNode) {
        selectedKonvaNode.moveUp();
        mainLayer?.batchDraw();
        updateObjectList(); // Rafra√Æchir l'ordre dans la liste
        console.log("Objet mont√©");
    }
    updateLayerControlButtons();
}

function moveSelectedObjectDown() {
    if (selectedKonvaNode) {
        selectedKonvaNode.moveDown();
        mainLayer?.batchDraw();
        updateObjectList();
        console.log("Objet descendu");
    }
    updateLayerControlButtons();
}

function deleteSelectedObject() {
    if (selectedKonvaNode) {
        const nodeName = selectedKonvaNode.name() || selectedKonvaNode.getClassName();
        if (confirm(`Voulez-vous vraiment supprimer l'objet "${nodeName}" ?`)) {
            selectedKonvaNode.destroy(); // D√©truit et supprime du calque
            mainLayer?.batchDraw();
            selectedKonvaNode = null;
            selectedListItem = null;
            updateObjectList();
            console.log("Objet supprim√©");
        }
    }
    updateLayerControlButtons();
}

function updateLayerControlButtons() {
    const canMove = !!selectedKonvaNode;
    const childrenCount = mainLayer?.getChildren().length || 0;

    if (btnMoveUp) btnMoveUp.disabled = !canMove || (selectedKonvaNode?.getZIndex() ?? 0) >= childrenCount -1 ;
    if (btnMoveDown) btnMoveDown.disabled = !canMove || (selectedKonvaNode?.getZIndex() ?? 0) <= 0;
    if (btnDeleteObject) btnDeleteObject.disabled = !canMove;
}

// Appeler cette fonction apr√®s chaque ajout ou suppression d'objet sur mainLayer
// Par exemple, √† la fin de la cr√©ation d'une ligne de crayon/gomme, ou d'un texte.
// Ou, plus simplement, la rappeler manuellement quand on sait que la structure a chang√©.
// Pour l'instant, elle est appel√©e √† l'init et apr√®s les actions de ce manager.